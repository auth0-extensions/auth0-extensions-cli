#!/usr/bin/env node

const _ = require('lodash');
const chalk = require('chalk');
const json = require('load-json-file');
const path = require('path');
const prog = require('caporal');
const request = require('superagent');
const Webpack = require('webpack');
const validator = require('webtask-json-validator');
const AdmZip = require('adm-zip');

const getConfig = require('../lib/config');
const getExternals = require('../lib/externals');
const getClientConfig = require('../lib/client-config');

prog
  .version('1.0.0')
  .command(
    'build:server',
    'Compile your Node.js Backend into an Auth0 Extension'
  )
  .argument('entryPoint', 'Entry point for your extension')
  .argument(
    'destinationFolder',
    'Folder where to store the output of the build'
  )
  .action(args => {
    const rootPath = process.cwd();
    json(path.join(rootPath, 'package.json')).then(pkg => {
      console.log(
        'Building:',
        chalk.bold(`${pkg.name}@${pkg.version} extension`)
      );

      getExternals(rootPath)
        .then(externals => getConfig(pkg, rootPath, args, externals))
        .then(config => {
          Webpack(config).run((err, stats) => {
            if (err) {
              console.log('Error:', chalk.bold(JSON.stringify(err, null, 2)));
            } else {
              const chunks = stats.toJson({ chunks: true }).chunks;
              console.log(
                'Output:',
                chalk.bold(
                  `${path.join(args.destinationFolder, chunks[0].files[0])}`
                )
              );

              const largeModules = _.chain(chunks[0].modules)
                .orderBy(['size'], ['desc'])
                .filter(m => m.size > 5000)
                .value();
              if (largeModules && largeModules.length) {
                largeModules.forEach(m =>
                  console.log(` - ${m.name} (${Math.round(m.size / 1024)} KB)`)
                );
              }

              console.log('\n');
              console.log(
                stats.toString({
                  colors: true,
                  cached: false,
                  cachedModules: false
                })
              );
            }
          });
        });
    });
  })
  .command(
    'build:client',
    'Compile your React Frontend into an Auth0 Extension Client'
  )
  .argument('entryPoint', 'Entry point for your extension')
  .argument('destinationFolder', 'Entry point for your extension')
  .action(args => {
    const rootPath = process.cwd();
    const entry = args.entryPoint || 'client/app.jsx';
    const destination = args.destinationFolder || 'dist';
    const mode = 'production';
    json(path.join(rootPath, 'package.json')).then(pkg => {
      console.log('Building:', chalk.bold(`${pkg.name}@${pkg.version} client`));

      Webpack(getClientConfig(pkg, rootPath, mode, entry, destination)).run(
        (err, stats) => {
          if (err) {
            console.log('Error:', chalk.bold(JSON.stringify(err, null, 2)));
          } else {
            console.log(
              stats.toString({
                colors: true,
                cached: false,
                cachedModules: false
              })
            );
          }
        }
      );
    });
  })
  .command(
    'validate',
    'Check extension`s package.json to contain all necessary information'
  )
  .argument('entryPoint', 'Entry point for your extension')
  .action(args => {
    const rootPath = process.cwd();
    const entry = args.entryPoint || 'package.json';
    const packagePath = path.join(rootPath, entry);

    json(packagePath).then(pkg => {
      console.log(`Validating ${packagePath}`);

      const result = validator.validate(pkg, true);

      if (result.isValid) {
        console.log(`${packagePath} is valid.`);
        return process.exit(0);
      }

      console.log(`${packagePath} is invalid.`, result.errors);
      return process.exit((result.errors && result.errors.length) || 1);
    });
  })
  .command('package', 'Package assets for extension deployment')
  .option('--client', 'Path of client side assets')
  .option('--bundle', 'Path to extensions bundle')
  .option('--out', 'Directory to copy build package')
  .action((args, opts) => {
    const rootPath = process.cwd();
    const packagePath = path.join(rootPath, 'package.json');

    json(packagePath).then(pkg => {
      console.log(`Validating ${packagePath}`);

      const result = validator.validate(pkg, true);

      if (!result.isValid) {
        console.log(`${packagePath} is invalid.`, result.errors);
        return process.exit((result.errors && result.errors.length) || 1);
      }

      const clientPath = opts.client ? path.join(rootPath, opts.client) : null;
      const bundlePath = path.join(
        rootPath,
        opts.bundle || `./dist/${pkg.name}.extension.${pkg.version}.js`
      );
      const outPath = path.join(
        rootPath,
        opts.out || pkg['auth0-extension'].main
      );

      console.log(
        'Packaging:',
        chalk.bold(`${pkg.name}@${pkg.version} extension assets`)
      );

      const zip = new AdmZip();

      zip.addLocalFile(packagePath);
      zip.addLocalFile(bundlePath, '', 'extension.js');
      if (clientPath) {
        zip.addLocalFolder(clientPath, 'client', filename => {
          return filename.endsWith('.js') || filename.endsWith('.css');
        });
      }

      const zipName = path.join(outPath, 'package.zip');

      return zip.writeZip(zipName, err => {
        if (err) {
          console.log('Error:', `Unable to package ${zipName}`);
          return process.exit(1);
        }

        console.log(`${zipName} packaged successfully`);
        return process.exit(0);
      });
    });
  })
  .command('deploy', 'Deploys the extension to Auth0.')
  .option('--apiKey', 'API Key')
  .option('--package', 'Path to extension bundle')
  .option('--url', 'URL to extension deploy endpoint')
  .action((args, opts) => {
    const rootPath = process.cwd();
    const filePath = path.join(rootPath, opts.package || 'dist/package.zip');
    const url = opts.url || 'http://0.0.0.0:3000/api/v1/extensions';
    const apiKey = opts.apiKey || process.env.AUTH0_EXTENSIONS_API_KEY;

    return request
      .post(url)
      .set({ 'X-API-KEY': `${apiKey}` })
      .attach('package', filePath)
      .then(
        () => {
          console.log('Extension has been deployed successfully');
          return process.exit(0);
        },
        err => {
          console.log('Deploy process failed');
          console.log((err.response && err.response.error) || err);
          return process.exit(1);
        }
      );
  });

prog.parse(process.argv);
